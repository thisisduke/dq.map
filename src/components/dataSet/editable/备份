<template>
  <a-button
    class="editable-add-btn"
    @click="handleAdd"
    style="margin-bottom: 8px"
    >添加</a-button
  >
  <a-table
    bordered
    :rowKey="(record,index)=>{return index}"
    :data-source="dataSource"
    :pagination="false"
    :columns="columns">
    <template #column_name="{record}">
      <div>
        <a-select
          show-search
          placeholder="请输入关键字搜索"
          style="width: 200px"
          :default-active-first-option="false"
          :show-arrow="false"
          :filter-option="false"
          :notFoundContent="fetching ? undefined : null"
          v-model:value="record.column_name"
          @search="handleSearch"
          @change="handleChange"
        >
          <template v-if="fetching" #notFoundContent>
            <a-spin size="small" />
          </template>
          <a-select-option v-for="option in selectData" :key="option">
            {{ option.column_name }}
          </a-select-option>
        </a-select>
      </div>
    </template>
    <template
      v-for="col in editType"
      #[col]="{ text,record }" :key="col">
      <div>
        <a-input
          v-if="editableData[record.key]"
          v-model:value="editableData[record.key][col]"
          style="margin: -5px 0"
        />
        <template v-else>
          {{ text }}
        </template>
      </div>
    </template>
    <template #operation="{ record }">
      <div class="editable-row-operations">
        <span v-if="editableData[record.key]">
          <a @click="handleSave(record.key)">保存</a>
          <a-popconfirm title="确定取消编辑内容吗？" @confirm="handleCancel(record.key)">
            <a>取消</a>
          </a-popconfirm>
        </span>
        <span v-else>

          <a @click="handleEdit(record.key)">编辑</a>
          <a-popconfirm
            v-if="dataSource.length"
            title="确定删除本条信息吗？"
            ok-text="确定"
            cancel-text="取消"
            @confirm="handleDelete(record.key)"
          >
            <a>删除</a>
          </a-popconfirm>
        </span>
      </div>

    </template>
  </a-table>
</template>
<script lang="ts">
import { toRefs, defineComponent, reactive, PropType, Ref, ref, UnwrapRef } from "vue";
import { cloneDeep } from "lodash-es";
import { columns } from "./tableConfig";
import { getColumnInfo } from '@/api/index'

interface IDataItem {
  key:string;
  column_name: string;
  category_name: string;
  caliber_desc: string;
  aggregate_mode: string;
  example_value: string;
}

export default defineComponent({
  name: "SQLEditable",
  props:{
    disabled:Boolean,
    data:Array as PropType<IDataItem[]>,
  },
  setup(props) {
    //table-data
    const dataSource: Ref<IDataItem[]> = ref([]);

    const state = reactive({
      selectData: [], //select-data
      value: [],
      fetching: false,
    });
    if(props.data){
      dataSource.value = props.data && props.data
    }
    console.log('dataSource.value',dataSource.value)
    const activeKey = dataSource.value[0] ? ref(dataSource.value[0].key) : ref(0);
    console.log('activeKey',activeKey)
    const editType = [
      'category_name',
      'caliber_desc',
      'aggregate_mode',
      'example_value'
    ]

    const editableData: UnwrapRef<Record<string, IDataItem>> = reactive({});

    const getTableData = ( value : string)=>{
      getColumnInfo(value).then(res=>{
        if (res.status_code == 10000) {
          state.fetching = false;
          state.selectData = res.data.column_data
        }
      })
    }

    const handleSearch = (value: string) => {
      state.selectData = [];
      state.fetching = true;
      getTableData(value)
    };

    const handleChange = ( option:IDataItem) => {
        dataSource.value.map(item=>{

          if(item.key == activeKey.value){

            item.column_name = option.column_name
            item.category_name = option.category_name
            item.caliber_desc = option.caliber_desc
            item.aggregate_mode = option.aggregate_mode
            item.example_value = option.example_value
          }
        })
    };

    const handleEdit = (key: string) => {
      editableData[key] = cloneDeep(dataSource.value.filter(item => key === item.key)[0]);
    };
    const handleSave = (key: string) => {
      Object.assign(dataSource.value.filter(item => key === item.key)[0], editableData[key]);
      delete editableData[key];
    };
    const handleCancel = (key: string) => {
      delete editableData[key];
    };

    const handleDelete = (key: string) => {
      dataSource.value = dataSource.value.filter((item) => item.key !== key);
    };



    const newTabIndex = ref(0);

    const handleAdd = () => {
      activeKey.value = `${newTabIndex.value++}`;

      dataSource.value.forEach(item=>{

        if(item.key == activeKey.value){
          activeKey.value = `${newTabIndex.value++}`;
        }
      })

      console.log('dataSource.value',dataSource.value)

      const newData = {
        key: activeKey.value,
        column_name: "",
        category_name: "",
        caliber_desc: "",
        aggregate_mode: "",
        example_value: "",
      };
      state.selectData = []
      dataSource.value.push(newData);
    };

    return {
      columns,
      editType,

      handleDelete,
      handleAdd,

      dataSource,
      editableData,

      handleSearch,
      handleChange,
      ...toRefs(state),

      handleCancel,
      handleEdit,
      handleSave,
    };
  },
});
</script>
<style lang="less">
.editable-row-operations a {
  margin-right: 8px;
}
</style>
